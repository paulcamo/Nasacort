// -------------------------------------------------------------------------------------------------

//breakpoins for Nasacort HCP
//
//   1          320                     1400                ?  
//   |-----------|------------------------|-----------------|
//       mobile  |          desktop       |   big-screen       
//               |                        |                    
//               |                        |
//           pp-mobile                pp-desktop    
// 
//
//    Note: pixelperfect should be only on breakpoints


@mixin breakpoint($point) {
    @if $point == big-screen {
        @media  screen and (min-width : 1401px) { @content;}
        $global-margin-left:14%;
    }
    @else if $point == mobile {
        @media  screen and (min-width : 1px) and (max-width : 768px)  { @content; }
    }
    @else if $point == desktop {
        @media  screen and (min-width : 1024px) and (max-width : 1400px)  { @content; }
    }
    @else if $point == tablet {
        @media  screen and (min-width : 768px) and (max-width : 1024px)  { @content; }
    }
    @else if $point == pp-mobile {
        @media  screen and (width : 320px) { @content; }
    }
    @else if $point == pp-desktop {
        @media  screen and (width : 1400px) { @content; }
    }
    @else if $point == limit {
      @media  screen and (min-width : 1801px) { @content;}
    }

    /*
    @else if $point == tablet {
        @media  screen and (min-width : 600px) and (max-width : 983px)  { @content; }
    }
    @else if $point == tablet-p {
        @media  screen and (min-width : 600px) and (max-width : 768px)  { @content; }
    }
    @else if $point == tablet-l {
        @media  screen and (min-width : 769px) and (max-width : 983px)  { @content; }
    }
  */


}


// -------------------------------------------------------------------------------------------------

@mixin fontFace($family,$src,$weight: normal,$style: normal) {
    @font-face {
        font-family: $family;
        src: url('#{$src}.eot');                                    // IE9 compatible
        src: url('#{$src}.eot?#iefix') format('embedded-opentype'), // IE8 and below
        url('#{$src}.woff') format('woff'),                         // standards
        url('#{$src}.ttf') format('truetype'),                      // Safari, Android, iOS
        url('#{$src}.svg##{$family}') format('svg');                // legacy iOS
        font-style: $style;
        font-weight: $weight;
    }
}
// -------------------------------------------------------------------------------------------------

@mixin sized-sprite($name, $w: 20, $h: 20) {
  @include sprite-sprite($name);
  height: #{$h}px;
  width: #{$w}px;
}

// -------------------------------------------------------------------------------------------------

@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

// -------------------------------------------------------------------------------------------------

@function fluid-percentage ($parent, $element) {
    @if unitless($element) {
        $element: $element * 1px;
    }
    @if unitless($parent) {
        $parent: $parent * 1px;
    }
    @return ($element * 100 / $parent) + '%';

}
// -------------------------------------------------------------------------------------------------
//This is used when you have a 100% element which has a child element that needs to match the full size
@mixin centered-container() {
    margin: 0 auto;
    max-width: $site-max-width;
}
// -------------------------------------------------------------------------------------------------


@mixin res-font($b1:320px, $f1:10px, $b2:768px, $f2:15px, $b3:1024px, $f3:20px) {
//    $b1 : $b1 + px; $b2 : $b2 + px; $b3 : $b3 + px;
//    $f1 : $f1 + px; $f2 : $f2 + px; $f3 : $f3 + px;


    $mt-mp1 : ($b2 - $b1)/4;


    @media  screen and (max-width : $b1) { font-size: ($f1) }
    $start: $b1+1;
    $end: $start + $mt-mp1;
    $f1: $f1+1;
    @media  screen and (min-width : ($start)) and (max-width : ($end))  { font-size: ($f1) }
    $start: $end+1;
    $end: $start + $mt-mp1;
    $f1: $f1+1;
    @media  screen and (min-width : ($start)) and (max-width : ($end))  { font-size: ($f1) }
    $start: $end+1;
    $end: $start + $mt-mp1;
    $f1: $f1+1;
    @media  screen and (min-width : ($start)) and (max-width : ($end))  { font-size: ($f1) }
    $start: $end+1;
    $end: $start + $mt-mp1;
    $f1: $f1+1;
    @media  screen and (min-width : ($start)) and (max-width : ($b2 - 1))  { font-size: ($f1) }

    @media  screen and (width : $b2) { font-size: ($f2) }
    @media  screen and (min-width : $b2+1) and (max-width : ($b3 - 1))  { font-size: ($f2) }
    @media  screen and (min-width : $b3) { font-size: ($f3) }
    patito: 100%;
}





// -------------------------------------------------------------------------------------------------

@mixin retina-image ($img) {
  background-image: url($img);
  background-position: top left;
  background-repeat: no-repeat;
  background-size: 100% 100%;
}

// -------------------------------------------------------------------------------------------------

@mixin hcenter {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

// -------------------------------------------------------------------------------------------------


@mixin center-both {
  position: absolute;
  top: 50%;
  left: 50%;
  @include prefix(transform, translate(-50%, -50%), 'webkit' 'ms');
}



/// Given a font size in pixels, reproduces that font size in rems.
/// @access public
/// @param {Length} $size - Font size
/// @example scss - Usage
/// .foo {
/// @include font-size(16px);
/// }
/// @example css - Result
/// .foo {
/// font-size: 16px;
/// font-size: 1rem;
/// }
@mixin font-size($size) {
  @if unitless($size) {
    $size: $size * 1px;
  }
  font-size: $size;
  font-size: ($size / $base-font-size) * 1rem;
}
/// Forces browsers to use hardware acceleration for transforms
/// @access public
/// @example scss - Usage
/// .foo {
/// @include ha;
/// }
/// @example css - Result
/// .foo {
/// -webkit-transform: translate3d(0, 0, 0);
/// -moz-transform: translate3d(0, 0, 0);
/// transform: translate3d(0, 0, 0);
/// }
@mixin ha {
  @include prefix(transform, translate3d(0, 0, 0), 'webkit' 'ms');
}




/// Retina image media query helper; given an image path with a 2x-sized version of an image, will load that image as a background-image on high-resolution devices.
/// @access public
/// @param {String} $image - Image path
/// @param {Length} $width - Image width
/// @param {Height} $height - Image height
/// @example scss - Usage
/// .foo {
/// @include image-2x('../images/image.png', 100%, auto);
/// }
@mixin image-2x($image, $width, $height) {
  @media (-webkit-min-device-pixel-ratio: 1.3),
  (min-resolution: 124dpi),
  (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
    background-size: $width $height;
  }
}

